
spring.datasource.url=jdbc:mysql://localhost:3306/spring?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

###########################
## 控制台输出
###########################
# 在运行命令后加入--debug标志，如：$ java -jar springTest.jar --debug
# 在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。
# debug=false

###########################
## 文件输出
###########################
# 默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。

# logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log
# logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log
# 如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。
# 如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log

# 注：二者不能同时使用，如若同时使用，则只有logging.file生效

# 默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO

###########################
## 级别控制 （ 优先级 application.xml > logback-spring.xml ）
###########################
# 所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中）
# 格式为：’logging.level.* = LEVEL’

# logging.level：日志级别控制前缀，*为包名或Logger名
# LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# 举例：

logging.level.root=info
#logging.level.com.example.logbackboot=info
# logging.level.com.dudu=DEBUG：com.dudu包下所有class以DEBUG级别输出
# logging.level.root=WARN：root日志以WARN级别输出

###########################
## 自定义日志配置
###########################
# 由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。

# 根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：

# Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
# Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
# Log4j2：log4j2-spring.xml, log4j2.xml
# JDK (Java Util Logging)：logging.properties
# Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），
# 命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。

# 上面是默认的命名规则，并且放在src/main/resources下面即可。

## 如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：
## logging.config=classpath:logging-config.xml
## 虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日志配置，这个功能会很有用。


